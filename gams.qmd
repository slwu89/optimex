---
title: "IJKLM model"
author: "Sean L. Wu"
date: "9/5/2024"
format: gfm
jupyter: julia-1.10
---

## The IJKLM model

An (in)famous [Julia Discourse thread](https://discourse.julialang.org/t/performance-julia-jump-vs-python-pyomo/92044) once asked how to make model building in JuMP faster compared to other platforms (Pyomo, and I guess GAMS). This turned into a [blog post by GAMS](https://www.gams.com/blog/2023/07/performance-in-optimization-models-a-comparative-analysis-of-gams-pyomo-gurobipy-and-jump/), a company which produces a modeling language that plugs into various commercial and open source solvers. The original formulation of the JuMP model showed very bad performance, but that was due to the way the author (employee of GAMS) was using Julia, rather than anything JuMP specific. The JuMP dev team responded with their own [blog post on the JuMP website](https://jump.dev/2023/07/20/gams-blog/), which was announced on a [Discourse thread](https://discourse.julialang.org/t/jump-developers-response-to-benchmarks-by-gams/101920). They used a DataFrames.jl based solution that was very fast. 

I'm interested to see if acsets can provide an alterative way to generate this model. The original data is reproducible at [justine18/performance_experiment](https://github.com/justine18/performance_experiment). I replicated the Python data generation code in Julia.

The model is given as:

$$\text{min} \ z = 1$$

$$\sum_{(j,k):(i,j,k) \in \mathcal{IJK}} \ \sum_{l:(j,k,l) \in \mathcal{JKL}} \ \sum_{m:(k,l,m) \in \mathcal{KLM}} x_{i,j,k,l,m} \ge 0 \hspace{1cm} \forall \ i \in \mathcal{I}$$

$$x_{i,j,k,l,m} \ge 0 \hspace{1cm} \forall \ (i,j,k) \in \mathcal{IJK}, l:(j,k,l) \in \mathcal{JKL}, m:(k,l,m) \in \mathcal{KLM} $$

The GAMS blog post calls subsets of Cartesian products "maps", which seems to be confused as a "map" is generally understood to be a function in math. General subsets of products are known as "relations".

## Data generation

First we load some packages we'll need. `DataFrames` for data frames, `Distributions` for sampling binomial random variates, `JuMP` to set up the model, `HiGHS` for a solver. `Catlab` provides a new data structure, the C-Set which will be compared to the data frames method.

```{julia}
#| output: false
#| results: false
using DataFrames
using Distributions
using JuMP, HiGHS
using Catlab, DataMigrations
using BenchmarkTools, MarkdownTables
```

We first generate synthetic "data". This should follow the data generation as I understand it from the original repo. The probability of all zeros with the given model sizes is incomprehensibly small but I added a check for it anyway. Who knows.

```{julia}
#| output: false
SampleBinomialVec = function(A,B,C,p=0.05)
    vec = rand(Binomial(1, p), length(A) * length(B) * length(C))
    while sum(vec) == 0
        vec = rand(Binomial(1, p), length(A) * length(B) * length(C))
    end
    return vec
end

n=100 # something large
m=20 # 20

# Sets IJKLM 
I = ["i$x" for x in 1:n]
J = ["j$x" for x in 1:m]
K = ["k$x" for x in 1:m]
L = ["l$x" for x in 1:m]
M = ["m$x" for x in 1:m]

# make IJK
IJK = DataFrame(Iterators.product(I,J,K))
rename!(IJK, [:i,:j,:k])
IJK.value = SampleBinomialVec(I,J,K)
filter!(:value => v -> v != 0, IJK)
select!(IJK, Not(:value))

# make JKL
JKL = DataFrame(Iterators.product(J,K,L))
rename!(JKL, [:j,:k,:l])
JKL.value = SampleBinomialVec(J,K,L)
filter!(:value => v -> v != 0, JKL)
select!(JKL, Not(:value))

# make KLM
KLM = DataFrame(Iterators.product(K,L,M))
rename!(KLM, [:k,:l,:m])
KLM.value = SampleBinomialVec(K,L,M)
filter!(:value => v -> v != 0, KLM)
select!(KLM, Not(:value))
```

## The "intuitive" formulation

As we know this is the slow one.

```{julia}
@benchmark let 
    x_list = [
        (i, j, k, l, m)
        for (i, j, k) in eachrow(IJK)
        for (jj, kk, l) in eachrow(JKL) if jj == j && kk == k
        for (kkk, ll, m) in eachrow(KLM) if kkk == k && ll == l
    ]
    model = JuMP.Model()
    set_silent(model)
    @variable(model, x[x_list] >= 0)
    @constraint(
        model,
        [i in I], 
        sum(x[k] for k in x_list if k[1] == i) >= 0
    )
end
```

## The DataFrames version

This is the fast DataFrames.jl based solution at JuMP blog link.

```{julia}
ijklm_df = DataFrames.innerjoin(
    DataFrames.innerjoin(IJK, JKL; on = [:j, :k]),
    KLM;
    on = [:k, :l],
)

@benchmark let
    ijklm = DataFrames.innerjoin(
        DataFrames.innerjoin(IJK, JKL; on = [:j, :k]),
        KLM;
        on = [:k, :l],
    )
    model = JuMP.Model()
    set_silent(model)
    ijklm[!, :x] = @variable(model, x[1:size(ijklm, 1)] >= 0)
    for df in DataFrames.groupby(ijklm, :i)
        @constraint(model, sum(df.x) >= 0)
    end
end
```

## The Acsets version

Acsets (Attributed C-Sets) are a nifty data structure coming from applied category theory, but its not too far off to think of them just as in-memory relational databases. They are provided in the [ACSets.jl](https://github.com/AlgebraicJulia/ACSets.jl) library, and imported and extended with machinery from applied category theory in [Catlab.jl](https://github.com/AlgebraicJulia/Catlab.jl). One of the advantages of using acsets and categorical machinery in general is that they have a natural graphical presentation, which in many cases is very readable and illuminating. To learn more about this data structure and many more topics, you can consult the package documentation and also you can begin with some [introductory articles on the AlgebraicJulia blog](https://blog.algebraicjulia.org/post/2020/09/cset-graphs-1/).

We use `@present` to make a schema for the acset which will store the data. Note that each "set" has turned into an object in the schema, and that the relations are also objects. There are projection maps from the relations into the sets which are involved in each relation. Each relation also has an arrow into `IntAttr` which will store the results of the binomial random draw that is used to "sparsify" the data.

```{julia}
@present IJKLMSch(FreeSchema) begin
    (I,J,K,L,M,IJK,JKL,KLM)::Ob
    IJK_I::Hom(IJK,I)
    IJK_J::Hom(IJK,J)
    IJK_K::Hom(IJK,K)
    JKL_J::Hom(JKL,J)
    JKL_K::Hom(JKL,K)
    JKL_L::Hom(JKL,L)
    KLM_K::Hom(KLM,K)
    KLM_L::Hom(KLM,L)
    KLM_M::Hom(KLM,M)
end

Catlab.to_graphviz(IJKLMSch, graph_attrs=Dict(:dpi=>"72",:ratio=>"expand",:size=>"8"))
```

Now we programatically generate the data type (and functions to work with it) for our schema, and fill it with data.

```{julia}
#| output: false
#| 
@acset_type IJKLMData(IJKLMSch, index=[:IJK_I,:IJK_J,:IJK_K,:JKL_J,:JKL_K,:JKL_L,:KLM_K,:KLM_L,:KLM_M])

ijklm_acs = @acset IJKLMData begin
    I = n
    J = m
    K = m
    L = m
    M = m

    IJK = nrow(IJK)
    IJK_I = [parse(Int, i[2:end]) for i in IJK.i]
    IJK_J = [parse(Int, j[2:end]) for j in IJK.j]
    IJK_K = [parse(Int, k[2:end]) for k in IJK.k]

    JKL = nrow(JKL)
    JKL_J = [parse(Int, j[2:end]) for j in JKL.j]
    JKL_K = [parse(Int, k[2:end]) for k in JKL.k]
    JKL_L = [parse(Int, l[2:end]) for l in JKL.l]

    KLM = nrow(KLM)
    KLM_K = [parse(Int, k[2:end]) for k in KLM.k]
    KLM_L = [parse(Int, l[2:end]) for l in KLM.l]
    KLM_M = [parse(Int, m[2:end]) for m in KLM.m]
end;
```

### Conjunctive Queries on Acsets

Now, the critical thing that the JuMP devs did to speed thing up was to replace the for loops with 2 inner joins, to get the "paths" through the relations. How to do this with acsets? Well one thing we can do is execute a conjunctive query on the acset to get the same thing. This is described in a [post at the AlgebraicJulia blog](https://blog.algebraicjulia.org/post/2020/12/cset-conjunctive-queries/).

```{julia}
connected_paths_query = @relation (i=i,j=j,k=k,l=l,m=m) begin
    IJK(IJK_I=i, IJK_J=j, IJK_K=k)
    JKL(JKL_J=j, JKL_K=k, JKL_L=l)
    KLM(KLM_K=k, KLM_L=l, KLM_M=m)
end

Catlab.to_graphviz(connected_paths_query, box_labels=:name, junction_labels=:variable, graph_attrs=Dict(:dpi=>"72",:size=>"3.5",:ratio=>"expand"))
```

While the blog post should be consulted for a complete explanation, the conjunctive query is expressed using an undirected wiring diagram (UWD) which is visualized using Catlab. Nodes (labeled ovals) in the UWD correspond to tables (primary keys) in the acset. Junctions (labeled dots) correspond to variables. Ports, which are unlabed in this graphical depiction, are where wires connect junctions to nodes. These correspond to columns of the table they are connected to. Outer ports, which are wires that run "off the page", are the columns of the table that will be returned as the result of the query. The rows that are returned from the query come from filtering the Cartesian product of the tables (nodes) such that variables in columns match according to ports that share a junction. In this case, it is equivalent to the two inner joins done above using DataFrames.

The JuMP blog post notes that while the data frames version doesn't resemble the nested summation it is arguably just as readable, especially if the columns were related to the process that was being modeled. I suggest that the acsets version is also just as readable, if not more, as the data schema and query diagram directly represent the data that parameterizes the optimization model.

The query is evaluated on the acset by computing its limit, which is a kind of generalization of meet. We can confirm that both the acsets and data frame methods return the same number of rows, and look at the output.

```{julia}
ijklm_query = query(ijklm_acs, connected_paths_query)
size(ijklm_query) == size(ijklm_df)
```

```{julia}
ijklm_query[1:5,:] |> markdown_table
```

Now that we know they are equal, we can go ahead and see how fast the acsets version is. The fact that the acsets based query is right on the tails of the `DataFrames` version is a performance win for the acsets library, as it is usually a generic conjunctive query engine across very general data structures (i.e., acsets are in general much more complex than a single dataframe, due to presence of multiple tables connected via foreign keys).

```{julia}
@benchmark let
    ijklm = query(ijklm_acs, connected_paths_query)
    model = JuMP.Model()
    set_silent(model)
    ijklm[!, :x] = @variable(model, x[1:size(ijklm, 1)] >= 0)
    for df in DataFrames.groupby(ijklm, :i)
        @constraint(model, sum(df.x) >= 0)
    end
end
```

### Data Migrations between Acsets

While the query execution in the previous section is already quite useful for practical application, it does have one downside, and that is the type of the return object is a `DataFrame`. While this is appropriate for many cases, one of the benefits of acsets is that, from one point of view, they are in-memory relational databases, and are therefore capable of representing data that is not possible to do with a single table. Therefore, it would be nice if one could execute a _data migration_ from one type of acset, where "type" means the schema, to another, that is able to carry along further data we need. For more details on contravariant data migration, please see Evan Patterson's Topos Institute colloquium presentation ["Categories of diagrams in data migration and computational physics"](https://www.youtube.com/live/Ra-PLnog_M0?si=1_ex4wLud2hSR7be).

In this context, if the "set" objects (`I`, `J`, etc) were further connected to other tables, maybe, say, a list of suppliers, or a list of materials, or even a process graph of downstream work, it would be inconvenient at least, if we lost that relational information during a query. In that case, we'd really want to return _another acset_ on a different schema that is precisely the right shape for what we want to do.

In this simple case, we have a quite simple schema which looks like a starfish. However, if some of the "set" objects had further morphisms to other objects (i.e., other tables), the advantages of using data migration become apparent.

```{julia}
@present IJKLMRelSch(FreeSchema) begin
    (IJKLM,I,J,K,L,M)::Ob
    i::Hom(IJKLM,I)
    j::Hom(IJKLM,J)
    k::Hom(IJKLM,K)
    l::Hom(IJKLM,L)
    m::Hom(IJKLM,M)
end

@acset_type IJKLMRelType(IJKLMRelSch)

Catlab.to_graphviz(IJKLMRelSch, graph_attrs=Dict(:dpi=>"72",:ratio=>"expand",:size=>"3.5"))
```

Now we formulate the data migration, using tools from the [AlgebraicJulia/DataMigrations.jl](https://github.com/AlgebraicJulia/DataMigrations.jl) package. While we will not be able to rigorously explain data migration here, if one has $C$-Set (instance of data on schema $C$) and wants to migrate it to a $D$-Set, a data migration functor $F$ needs to be specified. 

Here, $C$ is our schema `IJKLMSch` and $D$ is `IJKLMRelSch`. The functor $F$ is a mapping from $D$ to the category of diagrams on $C$; formally we denote it $F:D\rightarrow \text{Diag}^{\text{op}}(C)$. Each object in $D$ gets assigned a diagram into $C$, and morphisms in $D$ get assigned to contravariant morphisms of diagrams.

```{julia}
M = @migration IJKLMRelSch IJKLMSch begin
    IJKLM => @join begin
        ijk::IJK
        jkl::JKL
        klm::KLM
        i::I
        j::J
        k::K
        l::L
        m::M
        IJK_I(ijk) == i
        IJK_J(ijk) == j
        JKL_J(jkl) == j
        IJK_K(ijk) == k
        JKL_K(jkl) == k
        KLM_K(klm) == k
        JKL_L(jkl) == l
        KLM_L(klm) == l
        KLM_M(klm) == m
    end
    I => I
    J => J
    K => K
    L => L
    M => M
    i => i
    j => j
    k => k
    l => l
    m => m
end;
```

A diagram is itself a functor $D:J\rightarrow C$, where $J$ is (usually) a small category, and $D$ will point at some instance of the diagram in $C$. We can plot what the largest diagram looks like, that which object `IJKLM` in $D$ is mapped to. Note the similarity to the conjunctive query visualized as a UWD previously. In particular, note that "relation" elements must agree upon the relevant "set" elements via their morphisms. The object in $C$ that each object in $J$ corresponds to is given by the text after the colon in the relevant node.

```{julia}
F = functor(M)
to_graphviz(F.ob_map[:IJKLM],node_labels=true)
```

Because of the simplicity of the schema `IJKLMRelSch`, the contravariant morphisms of diagrams simply pick out the object in $D$ associated with the source of the morphism. Likewise, the natural transformation part of morphisms of diagrams simply selects for each object its identity morphism.

We run the data migration to move data from the schema `IJKLMSch` to `IJKLMRelSch` using the function `migrate`, and check that the result has the same number of records as other methods.

```{julia}
ijklm_migrate_acset = migrate(IJKLMRelType, ijklm_acs, M)
nparts(ijklm_migrate_acset, :IJKLM) == size(ijklm_query,1)
```

Let's look at the first few rows.

```{julia}
pretty_tables(ijklm_migrate_acset, tables=[:IJKLM], max_num_of_rows=5)
```

Once again, let's benchmark:

```{julia}
@benchmark let
    ijklm = migrate(IJKLMRelType, ijklm_acs, M)
    model = JuMP.Model()
    set_silent(model)
    @variable(model, x[parts(ijklm,:IJKLM)] >= 0)
    for i in parts(ijklm,:I)
        @constraint(model, sum(x[incident(ijklm,i,:i)]) >= 0)
    end
end
```